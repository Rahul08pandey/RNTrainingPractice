import {
    StyleSheet,
    Text,
    View,
    TextInput,
    TouchableOpacity,
    Modal
  } from 'react-native';
  import { React,useState} from 'react';
  import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
  
  export default function PharmacyModal({ isVisible, onAddPharmacy, onClose }) {
    const [pharmacyData, setPharmacyData] = useState({
      pharmacyName: '',
      medicineCategory: [
        {
          medicineCategoryType: '',
          medicineNames: [{ name: '' }]
        }],
    });
  
    const handleAddMedicineType = () => {
      setPharmacyData((prevMedicineType) => ({
        ...prevMedicineType,
        medicineCategory: [
          ...prevMedicineType.medicineCategory,
          {
            medicineCategoryType: '',
            medicineNames: [{ name: '' }],
          },
        ],
      }));
    };
  
    const handleAddMedicine = (addMedicineIndex) => {
      setPharmacyData((prevMedicine) => {
        const updateMedicine = [...prevMedicine.medicineCategory];
        updateMedicine[addMedicineIndex].medicineNames.push({ name: '' });
        return {
          ...prevMedicine, medicineCategory: updateMedicine
        };
      });
    };
    
  const handleSavePharmacy = () => {
        setPharmacyData({
          pharmacyName: '',
          medicineCategory: [{
            medicineCategoryType: '',
            medicineNames: [{ name: '' }]
          }],
        });
    const updatedType = pharmacyData.medicineCategory.map((medType) => ({
            medicineCategoryType: medType.medicineCategoryType.trim(),
            medicineNames: medType.medicineNames.filter(
              medicineNames => medicineNames.name.trim() !== ''
              ),
            }))
      .filter(medType => medType.medicineNames.length > 0);
          const newPharmacyData = {
          pharmacyName: pharmacyData.pharmacyName.trim(),
          medicineCategory: updatedType,
        };
        onAddPharmacy(newPharmacyData);
        onClose();
        console.log('pharmacyData', newPharmacyData);
      };
  
    return (
      <Modal visible={isVisible} animationType="slide">
        <View style={{flex: 1, padding: 10}}>
          <View style={styles.headContainer}>
            <Text style={styles.heading}>Pharmacy Data:</Text>
             </View>
            <View style={{
            flex: 0.8,
            // backgroundColor: 'blue'
             }}>
            <Text style={{
              fontSize: 22,
              color: 'black',
              fontFamily: 'PlaypenSans-Medium',
            }}>
              Enter Pharmacy Name:</Text>
                <TextInput
                  style={styles.pharmacyNameInput}
                  placeholder="Enter Pharmacy Name"
                  value={pharmacyData.pharmacyName}
              onChangeText={(text) =>
                    // Object.assign({},text,setPharmacyData)
                    setPharmacyData((prevName) => ({
                      ...prevName,
                      pharmacyName: text,
                    }))
                  }
                />
                <Text style={{
                  fontSize:22,
                color:'black',
                fontFamily:'PlaypenSans-Medium',
                }}>
                  Enter Medicine Category:
                </Text>
              
              {pharmacyData.medicineCategory.map((medCategoryType, index) => (
                <View key={index}>
                  <View  style={styles.medicineCategoryContainer}>
                    <TextInput
                      style={styles.medicineCategoryInput}
                      placeholder="Enter Medicine Category Type"
                      value={medCategoryType.medicineCategoryType}
                      onChangeText={(text) =>
                        setPharmacyData((prevMedType) => {
                          const updateCategoryType = [...prevMedType.medicineCategory];
                          updateCategoryType[index].medicineCategoryType = text;
                          return { ...prevMedType, medicineCategory: updateCategoryType };
                        })
                      }
                    />
                    <View
                      style={{
                         flex: 0.15,
                         alignItems: 'center',
                         justifyContent: 'center',
                         backgroundColor: 'orange',
                         color: 'white',
                         borderWidth: 1, 
                         borderRadius: 10,
                      }}>
                      <TouchableOpacity
                      onPress={handleAddMedicineType}>
                      <Text style={styles.buttonText}>Add Type</Text>
                      </TouchableOpacity>
                    </View>
                  </View>

                  {medCategoryType.medicineNames.map((medName, medNameIndex) => (
                    <View style={styles.medicineName} key={medNameIndex}>
                      <TextInput
                        style={styles.medicineNameInput}
                        placeholder="Enter Medicine Name"
                        value={medName.name}
                        onChangeText={(text) =>
                          setPharmacyData((prevMedName) => {
                            const updatedType = [...prevMedName.medicineCategory];
                            updatedType[index].medicineNames[medNameIndex].name = text;
                            console.log('medicineName',JSON.stringify(updatedType))
                            return {
                              ...prevMedName, medicineCategory: updatedType
                            };
                          })
                        }
                      />
                      <View style={styles.iconButton}>
                      <TouchableOpacity
                        onPress={() => handleAddMedicine(index)}>
                        <Icon name="plus-circle-outline" size={30} color="black"/>
                      </TouchableOpacity>
                      </View>
                  </View>
                  ))}
                </View>
              ))}
            </View>
            <View style={styles.savePharmacyDataButton}>
              <TouchableOpacity onPress={handleSavePharmacy}>
                <Text style={styles.btnTxt}>Save</Text>
              </TouchableOpacity>
          </View>
        </View>
      </Modal>
    );
  }
  
  const styles = StyleSheet.create({
  headContainer: {
    flex: 0.15,
    alignContent: 'center',
    justifyContent: 'center',
    // backgroundColor: 'black',
  },

  heading: {
    fontSize: 40,
    textAlign: 'center',
    color: 'green',
    fontFamily: 'Lugrasimo-Regular',
    // backgroundColor: 'red',
  },

  pharmacyNameInput: {
    borderRadius: 10,
    fontSize: 16,
    borderWidth: 2,
    paddingLeft: 10,
    backgroundColor: '#d3d3d3',
    // width: '100%',
  },
  
  medicineCategoryContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
    // alignItems: 'center',
    },
  
  medicineCategoryInput: {
    flex: 0.82,
    borderRadius: 10,
    fontSize: 16,
    borderWidth: 2,
    paddingLeft: 10,  
    // width: '80%',
    backgroundColor: '#d3d3d3',
  },

  medicineName:{
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
    },
  
    medicineNameInput: {
      flex: 0.85,
      fontSize: 16,
      borderWidth: 2,
      borderRadius: 10,
      paddingLeft: 10,
      marginLeft:60,
      backgroundColor: '#d3d3d3',
    },
    
    iconButton: {
      alignItems: 'center',
      justifyContent:'center'
    },

    savePharmacyDataButton: {
    flex:0.05,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 20,
    padding: 10,
    // backgroundColor: 'green',
  },

  btnTxt: {
    color: 'black',
    fontSize: 18,
  },
});
